
name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Read Version File
      id: get_version
      run: echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

    - name: Increment Patch Version
      id: update_version
      run: |
        OLD_VERSION=$(cat VERSION)
        BASE_VERSION=$(echo $OLD_VERSION | cut -d'.' -f1,2)
        PATCH_VERSION=$(echo $OLD_VERSION | cut -d'.' -f3)
        NEW_VERSION="$BASE_VERSION.$((PATCH_VERSION + 1))"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo $NEW_VERSION > VERSION

    - name: Commit Updated Version
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git add VERSION
        git commit -m "Bump version to ${{ env.NEW_VERSION }} [skip ci]"
        git push

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Update Maven Version
      run: mvn versions:set -DnewVersion=${{ env.NEW_VERSION }}

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Rename JAR with Version
      run: |
        JAR_NAME=$(ls target/*.jar | grep -v "original" | head -n 1)
        mv $JAR_NAME target/myapp-${{ env.NEW_VERSION }}.jar

    - name: Build Docker Image
      run: |
        docker build -t myapp:${{ env.NEW_VERSION }} .

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker Image to Docker Hub
      run: |
        docker tag myapp:${{ env.NEW_VERSION }} hilelsagi/myapp:${{ env.NEW_VERSION }}
        docker push hilelsagi/myapp:${{ env.NEW_VERSION }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: myapp-${{ env.NEW_VERSION }}.jar
        path: target/myapp-${{ env.NEW_VERSION }}.jar
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    - name: SSH into EC2 and Deploy Docker Image
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      run: |
        echo "$PRIVATE_KEY" > KEY.pem && chmod 600 KEY.pem 
        ssh -i KEY.pem ubuntu@51.21.170.193  '
        # Install Docker (if not installed)
        sudo apt-get update
        sudo apt-get install -y docker.io
        sudo systemctl start docker.service 
        # Log in to Docker Hub
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

        # Pull the Docker image from Docker Hub
        docker pull hilelsagi/myapp:${{ env.NEW_VERSION }}

        # Stop any running container (optional, depending on your needs)
        docker stop myapp-container || true
        docker rm myapp-container || true

        # Run the new container
        docker run -d --name myapp-container -p 8080:8080 hilelsagi/myapp:${{ env.NEW_VERSION }}
        '
